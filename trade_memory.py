import json
from logger import log_info, log_error

MEMORY_FILE = "trade_memory.json"

# === –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –ø–∞–º'—è—Ç—å ===
def load_memory():
    try:
        with open(MEMORY_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

# === –ó–±–µ—Ä–µ–≥—Ç–∏ –ø–∞–º'—è—Ç—å ===
def save_memory(data):
    with open(MEMORY_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

# === –ó–∞–ø–∏—Å–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∫—É–ø—ñ–≤–ª—é ===
def record_buy(symbol, price):
    memory = load_memory()
    memory[symbol] = {
        "last_buy_price": price
    }
    save_memory(memory)
    log_info(f"üß† –ó–∞–ø–∏—Å–∞–Ω–æ –ø–æ–∫—É–ø–∫—É {symbol} @ {price:.4f}")

# === –û—Ç—Ä–∏–º–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—é –∫—É–ø—ñ–≤–ª—é ===
def get_last_buy_price(symbol):
    memory = load_memory()
    return memory.get(symbol, {}).get("last_buy_price", None)

# === –ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ —á–∏ –ø—Ä–æ–¥–∞–∂ –ø—Ä–∏–±—É—Ç–∫–æ–≤–∏–π ===
def is_profitable_sell(symbol, current_price, min_margin=0.002):
    last_price = get_last_buy_price(symbol)
    if last_price is None:
        log_info(f"‚ÑπÔ∏è –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—é –∫—É–ø—ñ–≤–ª—é {symbol}")
        return True  # –¥–æ–∑–≤–æ–ª–∏—Ç–∏ –ø—Ä–æ–¥–∞–∂

    required_price = last_price * (1 + min_margin)
    if current_price >= required_price:
        log_info(f"‚úÖ –ü—Ä–æ–¥–∞–∂ –≤–∏–≥—ñ–¥–Ω–∏–π: {current_price:.4f} ‚â• {required_price:.4f}")
        return True
    else:
        log_info(f"‚õî –ü—Ä–æ–¥–∞–∂ –ù–ï –≤–∏–≥—ñ–¥–Ω–∏–π: {current_price:.4f} < {required_price:.4f}")
        return False
