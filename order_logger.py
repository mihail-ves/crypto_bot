import csv
import os
from datetime import datetime
from logger import log_info, log_error

LOG_FILE = "trade_log.csv"
ORDER_LOG_FILE = "orders.csv"

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è trade_log.csv ===
if not os.path.exists(LOG_FILE):
    try:
        with open(LOG_FILE, "w", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            writer.writerow(["timestamp", "symbol", "side", "amount", "price", "note"])
        log_info("üìÅ –°—Ç–≤–æ—Ä–µ–Ω–æ trade_log.csv –∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏")
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ trade_log.csv: {e}")

# === –ó–∞–ø–∏—Å –æ—Ä–¥–µ—Ä–∞ –≤ orders.csv ===
def log_order_to_csv(symbol, side, quantity, result):
    """
    –õ–æ–≥—É—î —Ç–æ—Ä–≥–æ–≤–∏–π –æ—Ä–¥–µ—Ä —É —Ñ–∞–π–ª orders.csv.
    result ‚Äî —Å–ª–æ–≤–Ω–∏–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –æ—Ä–¥–µ—Ä, –æ—á—ñ–∫—É—î—Ç—å—Å—è –∫–ª—é—á 'id'.
    """
    try:
        with open(ORDER_LOG_FILE, mode="a", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow([
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                symbol,
                side,
                f"{quantity:.4f}",
                result.get('id', 'N/A')
            ])
        log_info(f"üßæ –û—Ä–¥–µ—Ä –∑–∞–ø–∏—Å–∞–Ω–æ: {side} {quantity} {symbol}")
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –æ—Ä–¥–µ—Ä–∞: {e}")

# === –ó–∞–ø–∏—Å —Ç–æ—Ä–≥–æ–≤–æ—ó –¥—ñ—ó –≤ trade_log.csv ===
def log_trade_to_csv(symbol, side, amount, price, note):
    """
    –ó–∞–ø–∏—Å—É—î —Ç–æ—Ä–≥–æ–≤—É –¥—ñ—é –≤ trade_log.csv –∑ —Ü—ñ–Ω–æ—é.
    """
    try:
        with open(LOG_FILE, mode="a", newline='', encoding="utf-8") as file:
            writer = csv.writer(file)
            writer.writerow([
                datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                symbol,
                side,
                f"{amount:.4f}",
                f"{price:.2f}",
                note
            ])
        log_info(f"üìò –ó–∞–ø–∏—Å —É –∂—É—Ä–Ω–∞–ª: {side} {amount} {symbol} @ {price} ‚Äî {note}")
    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å—ñ –≤ –∂—É—Ä–Ω–∞–ª: {e}")

# === –ß–∏—Ç–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö –∑–∞–ø–∏—Å—ñ–≤ –∑ trade_log.csv ===
def read_last_log_entries(n=10):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –æ—Å—Ç–∞–Ω–Ω—ñ n –∑–∞–ø–∏—Å—ñ–≤ –∑ trade_log.csv —É –≤–∏–≥–ª—è–¥—ñ —Å–ø–∏—Å–∫—É —Ä—è–¥–∫—ñ–≤.
    """
    if not os.path.exists(LOG_FILE):
        log_info("‚ÑπÔ∏è –ñ—É—Ä–Ω–∞–ª —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ")
        return []

    try:
        with open(LOG_FILE, "r", encoding="utf-8") as f:
            lines = f.readlines()

        if len(lines) <= 1:
            log_info("‚ÑπÔ∏è –ñ—É—Ä–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π")
            return []

        entries = lines[1:]  # –ø—Ä–æ–ø—É—Å–∫–∞—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
        return entries[-n:]

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∂—É—Ä–Ω–∞–ª—É: {e}")
        return []
