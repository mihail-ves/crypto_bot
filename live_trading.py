# live_trading.py
import time
from binance_api import get_price, get_balance, place_order
from strategy import should_buy, should_sell
from analytics import atr, breakout, btc_eth_ratio
from telegram_notifier import send_telegram_message
from order_logger import log_order_to_csv
from logger import log_info, log_error
from config.config_loader import CONFIG

# === –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó ===
SYMBOL = CONFIG.get("SYMBOL", "BTCUSDT")
TRADE_AMOUNT = CONFIG.get("TRADE_AMOUNT", 0.01)
INTERVAL = CONFIG.get("INTERVAL", 30)  # —Å–µ–∫—É–Ω–¥ –º—ñ–∂ —Ü–∏–∫–ª–∞–º–∏

# === –Ü—Å—Ç–æ—Ä—ñ—è –¥–ª—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏ ===
price_history = []
signal_history = []
trading_enabled = True

# === –û—Å–Ω–æ–≤–Ω–∏–π —Ç–æ—Ä–≥–æ–≤–∏–π —Ü–∏–∫–ª ===
def trading_loop():
    """
    –ó–∞–ø—É—Å–∫–∞—î –Ω–µ—Å–∫—ñ–Ω—á–µ–Ω–Ω–∏–π —Ü–∏–∫–ª —Ä–µ–∞–ª—å–Ω–æ—ó —Ç–æ—Ä–≥—ñ–≤–ª—ñ —á–µ—Ä–µ–∑ Binance.

    –ö–æ–∂–µ–Ω —Ü–∏–∫–ª:
        - –û—Ç—Ä–∏–º—É—î –ø–æ—Ç–æ—á–Ω—É —Ü—ñ–Ω—É
        - –û–Ω–æ–≤–ª—é—î —ñ—Å—Ç–æ—Ä—ñ—é
        - –ê–Ω–∞–ª—ñ–∑—É—î —Å–∏–≥–Ω–∞–ª BUY/SELL
        - –í–∏–∫–æ–Ω—É—î –æ—Ä–¥–µ—Ä
        - –õ–æ–≥—É—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        - –ù–∞–¥—Å–∏–ª–∞—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram
    """
    global price_history, signal_history

    log_info("üì° –ó–∞–ø—É—Å–∫ live_trading —Ü–∏–∫–ª—É...")
    send_telegram_message("üì° Live-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω–æ.")

    while True:
        try:
            if not trading_enabled:
                time.sleep(INTERVAL)
                continue

            price = get_price(SYMBOL)
            if price is None:
                time.sleep(INTERVAL)
                continue

            price_history.append(price)
            if len(price_history) > 100:
                price_history = price_history[-100:]

            # === –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Å–∏–≥–Ω–∞–ª—É ===
            if should_buy(price_history):
                signal = "BUY"
                result = place_order(SYMBOL, "BUY", TRADE_AMOUNT)
            elif should_sell(price_history):
                signal = "SELL"
                result = place_order(SYMBOL, "SELL", TRADE_AMOUNT)
            else:
                signal = "NONE"
                result = None

            signal_history.append(signal)
            if len(signal_history) > 100:
                signal_history = signal_history[-100:]

            # === –õ–æ–≥—É–≤–∞–Ω–Ω—è —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ===
            if result:
                log_order_to_csv(SYMBOL, signal, TRADE_AMOUNT, result)
                send_telegram_message(f"üìà {signal} {TRADE_AMOUNT} {SYMBOL} @ {result.get('price', 'N/A')}")
            else:
                log_info(f"‚è∏ –ë–µ–∑ —Å–∏–≥–Ω–∞–ª—É: {price}")

            # === –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ (–æ–ø—Ü—ñ–π–Ω–æ)
            if len(price_history) >= 6:
                atr_val = atr(price_history)
                breakout_val = breakout(price_history)
                ratio_val = btc_eth_ratio(get_price("BTCUSDT"), get_price("ETHUSDT"))
                log_info(f"üìä ATR: {atr_val:.2f}, Breakout: {breakout_val}, BTC/ETH: {ratio_val:.2f}")

            time.sleep(INTERVAL)

        except Exception as e:
            log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ live_trading: {e}")
            send_telegram_message(f"‚ùå Live-—Ç—Ä–µ–π–¥–∏–Ω–≥ –∞–≤–∞—Ä—ñ–π–Ω–æ –∑–∞–≤–µ—Ä—à–∏–≤—Å—è: {e}")
            time.sleep(60)
