# core/market_api.py
# market_api.py ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π API
from core.state import MODE
from logger import log_error, log_info
from telegram_notifier import send_telegram_message
from trader import price_history  # —è–∫—â–æ –Ω–µ —Å—Ç–≤–æ—Ä—é—î —Ü–∏–∫–ª—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç
from core.market_state import get_latest_price

def get_price(symbol):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –ø–æ—Ç–æ—á–Ω—É —Ä–∏–Ω–∫–æ–≤—É —Ü—ñ–Ω—É –¥–ª—è –∑–∞–¥–∞–Ω–æ–≥–æ —Å–∏–º–≤–æ–ª—É.
    """
    try:
        if MODE == "live":
            ticker = client.get_symbol_ticker(symbol=symbol)
            price = float(ticker["price"])
            log_info(f"üìà –¶—ñ–Ω–∞ {symbol}: {price}")
            return price

        # === MOCK —Ä–µ–∂–∏–º: –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –æ—Å—Ç–∞–Ω–Ω—é –∑–±–µ—Ä–µ–∂–µ–Ω—É —Ü—ñ–Ω—É ===
        price = get_latest_price(symbol)
        if price is not None:
            log_info(f"üìä MOCK —Ü—ñ–Ω–∞ {symbol}: {price}")
            return price

        return 100.0  # fallback –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤

    except Exception as e:
        log_error(f"‚ùå Binance get_price –ø–æ–º–∏–ª–∫–∞: {e}")
        send_telegram_message(f"‚ùå Binance API get_price –ø–æ–º–∏–ª–∫–∞: {e}")
        return None

def get_balance(asset):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î —Ñ—ñ–∫—Å–æ–≤–∞–Ω–∏–π —Ç–µ—Å—Ç–æ–≤–∏–π –±–∞–ª–∞–Ω—Å.
    """
    return 1000.0

def place_order(symbol, side, quantity):
    """
    –°–∏–º—É–ª—é—î –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –æ—Ä–¥–µ—Ä–∞.
    """
    return {
        "id": "MOCK_ORDER",
        "price": get_price(symbol),
        "status": "FILLED"
    }
