# chart_generator.py
import matplotlib.pyplot as plt
from io import BytesIO
from logger import log_info, log_error

def generate_chart(prices, signals):
    """
    –ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ —Ü—ñ–Ω–∏ –∑ –ø–æ–∑–Ω–∞—á–∫–∞–º–∏ BUY/SELL.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        prices (list): –Ü—Å—Ç–æ—Ä—ñ—è —Ü—ñ–Ω.
        signals (list): –Ü—Å—Ç–æ—Ä—ñ—è —Å–∏–≥–Ω–∞–ª—ñ–≤ ("BUY", "SELL", "SKIPPED_BUY", "SKIPPED_SELL", "NONE").

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        –ü–æ–≤–µ—Ä—Ç–∞—î BytesIO-–æ–±'—î–∫—Ç –∑ PNG-–≥—Ä–∞—Ñ—ñ–∫–æ–º.
    """
    try:
        if len(prices) == 0 or len(signals) == 0:
            log_error("‚ùå –ù–µ–º–æ–∂–ª–∏–≤–æ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ ‚Äî –ø–æ—Ä–æ–∂–Ω—ñ –¥–∞–Ω—ñ.")
            return None

        plt.figure(figsize=(10, 5))
        plt.plot(prices, label='Price', color='blue')

        for i, signal in enumerate(signals):
            if i >= len(prices):
                continue

            if signal == 'BUY':
                plt.plot(i, prices[i], 'go', label='BUY' if i == 0 else "")
            elif signal == 'SELL':
                plt.plot(i, prices[i], 'ro', label='SELL' if i == 0 else "")
            elif signal == 'SKIPPED_BUY':
                plt.plot(i, prices[i], 'yo', label='SKIPPED_BUY' if i == 0 else "")
            elif signal == 'SKIPPED_SELL':
                plt.plot(i, prices[i], 'mo', label='SKIPPED_SELL' if i == 0 else "")
            elif signal == 'NONE':
                plt.plot(i, prices[i], 'ko', label='NONE' if i == 0 else "")

        plt.xlabel("–Ü—Ç–µ—Ä–∞—Ü—ñ—è")
        plt.ylabel("–¶—ñ–Ω–∞")
        plt.title("üìà –ì—Ä–∞—Ñ—ñ–∫ —Ü—ñ–Ω–∏ –∑ —Ç–æ—Ä–≥–æ–≤–∏–º–∏ —Å–∏–≥–Ω–∞–ª–∞–º–∏")
        plt.legend(loc='upper left')
        plt.grid(True)
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        log_info("‚úÖ –ì—Ä–∞—Ñ—ñ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —è–∫ BytesIO")
        return buf

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫—É: {e}")
        return None


def generate_pnl_chart(pnl_history: list):
    """
    –ì–µ–Ω–µ—Ä—É—î –≥—Ä–∞—Ñ—ñ–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PnL –ø–æ —É–≥–æ–¥–∞—Ö.

    –ê—Ä–≥—É–º–µ–Ω—Ç–∏:
        pnl_history (list): –°–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å—ñ–≤ –∑ –∫–ª—é—á–∞–º–∏ 'pnl'

    –†–µ–∑—É–ª—å—Ç–∞—Ç:
        BytesIO-–æ–±'—î–∫—Ç –∑ PNG-–≥—Ä–∞—Ñ—ñ–∫–æ–º
    """
    try:
        if not pnl_history:
            log_error("‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –ø–æ–±—É–¥–æ–≤–∏ PnL-–≥—Ä–∞—Ñ—ñ–∫–∞.")
            return None

        x = list(range(1, len(pnl_history) + 1))
        y = [record["pnl"] for record in pnl_history]

        plt.figure(figsize=(8, 4))
        plt.plot(x, y, marker='o', linestyle='-', color='green')
        plt.title("üìà –†–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π PnL")
        plt.xlabel("–£–≥–æ–¥–∞")
        plt.ylabel("USDT")
        plt.grid(True)
        plt.tight_layout()

        buf = BytesIO()
        plt.savefig(buf, format='png')
        buf.seek(0)
        plt.close()

        log_info("‚úÖ PnL-–≥—Ä–∞—Ñ—ñ–∫ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ —è–∫ BytesIO")
        return buf

    except Exception as e:
        log_error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ PnL-–≥—Ä–∞—Ñ—ñ–∫–∞: {e}")
        return None
