import json, os
from logger import log_info, log_error
from core.price_feed import get_price  # ‚Üê –±–µ–∑ —Ü–∏–∫–ª—ñ—á–Ω–æ–≥–æ —ñ–º–ø–æ—Ä—Ç—É

DATA_DIR = "user_data"

# === –®–ª—è—Ö –¥–æ –±–∞–ª–∞–Ω—Å—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ===
def get_balance_path(user_id):
    os.makedirs(DATA_DIR, exist_ok=True)
    return os.path.join(DATA_DIR, f"{user_id}_balance.json")

# === –û–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ===
def update_mock_balance(user_id, asset, amount):
    path = get_balance_path(user_id)
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = {}

    data[asset] = data.get(asset, 0.0) + amount

    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)
    log_info(f"üí∞ [{user_id}] –ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ: {asset} {'+' if amount >= 0 else ''}{amount:.4f}")

# === –û—Ç—Ä–∏–º–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É ===
def get_mock_balance(user_id, asset):
    path = get_balance_path(user_id)
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
        return data.get(asset, 0.0)
    except:
        return 0.0

# === –°–∏–º—É–ª—è—Ü—ñ—è –ø–æ–∫—É–ø–∫–∏ ===
def simulate_buy(user_id, symbol, amount):
    if not symbol.endswith("USDT"):
        log_error(f"‚ùå [{user_id}] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª—É: {symbol}")
        return

    asset = symbol.replace("USDT", "")
    price = get_price(symbol)
    if price is None:
        log_error(f"‚ùå [{user_id}] –¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {symbol}")
        return

    cost = amount * price
    usdt_balance = get_mock_balance(user_id, "USDT")
    if usdt_balance < cost:
        log_error(f"‚ùå [{user_id}] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ USDT –¥–ª—è –ø–æ–∫—É–ø–∫–∏ {amount} {asset}. –ü–æ—Ç—Ä—ñ–±–Ω–æ {cost:.2f}, —î {usdt_balance:.2f}")
        return

    update_mock_balance(user_id, asset, amount)
    update_mock_balance(user_id, "USDT", -cost)
    log_info(f"üü¢ [{user_id}] –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø–∫—É: {amount:.4f} {asset} @ {price:.4f}, —Å–ø–∏—Å–∞–Ω–æ {cost:.2f} USDT")

# === –°–∏–º—É–ª—è—Ü—ñ—è –ø—Ä–æ–¥–∞–∂—É ===
def simulate_sell(user_id, symbol, amount):
    if not symbol.endswith("USDT"):
        log_error(f"‚ùå [{user_id}] –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª—É: {symbol}")
        return False, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å–∏–º–≤–æ–ª—É"

    asset = symbol.replace("USDT", "")
    price = get_price(symbol)
    if price is None:
        log_error(f"‚ùå [{user_id}] –¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {symbol}")
        return False, "–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"

    path = get_balance_path(user_id)
    try:
        with open(path, "r", encoding="utf-8") as f:
            data = json.load(f)
    except:
        data = {}

    current = data.get(asset, 0.0)
    if current < amount:
        log_error(f"‚ùå [{user_id}] –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ {asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂—É. –Ñ –ª–∏—à–µ {current:.4f}")
        return False, f"–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ {asset} –¥–ª—è –ø—Ä–æ–¥–∞–∂—É. –Ñ –ª–∏—à–µ {current:.4f}"

    data[asset] = current - amount
    revenue = amount * price
    data["USDT"] = data.get("USDT", 0.0) + revenue

    with open(path, "w", encoding="utf-8") as f:
        json.dump(data, f, indent=2)

    log_info(f"üîª [{user_id}] –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {amount:.4f} {asset} @ {price:.4f}, –æ—Ç—Ä–∏–º–∞–Ω–æ {revenue:.2f} USDT")
    return True, f"üîª –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ –ø—Ä–æ–¥–∞–∂: {amount:.4f} {asset} @ {price:.4f}"
