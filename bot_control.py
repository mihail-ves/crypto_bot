print("üß≠ –ó–∞–ø—É—â–µ–Ω–æ bot_control –∑ –≥–æ–ª–æ–≤–Ω–æ—ó –ø–∞–ø–∫–∏")
import json, time
from telegram import Update, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from logger import log_info, log_error
from config.config_loader import CONFIG
from chart_generator import generate_chart, generate_pnl_chart
from telegram_notifier import send_telegram_image
from analytics import atr, breakout, btc_eth_ratio
import trader
from mock_trading import update_mock_balance, get_mock_balance, simulate_buy, simulate_sell
from trade_config import load_config, save_config, current_symbol, current_amount, update_symbol
from order_logger import read_last_log_entries
from trader import price_history, signal_history
from core.state import MODE, trading_enabled
import core.state as state
from core.portfolio_state import (
    avg_entry_price, position_size,
    update_entry, get_entry, get_all_entries,
    load_state, save_state
)
from core.market_api import get_price
from core.pnl_storage import save_pnl_history, load_pnl_history
import matplotlib.pyplot as plt
from io import BytesIO
from mock_trading import simulate_buy, simulate_sell
from trade_memory import record_buy, is_profitable_sell
from risk_guard import track_asset, evaluate_risk
from core.price_feed import get_price


CONFIG_PATH = "config.json"
BALANCE_FILE = "mock_balance.json"
ORDERS_FILE = "mock_orders.json"

load_state()
state.MODE = "live"
state.trading_enabled = False

# === –ì–ª–æ–±–∞–ª—å–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—è PnL ===
pnl_history = load_pnl_history()

# === –ó–∞–ø–∏—Å –æ—Ä–¥–µ—Ä–∞ ===
def record_order(order_type: str, asset: str, amount: float, price: float):
    try:
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            orders = json.load(f)
    except:
        orders = []

    orders.append({
        "type": order_type,
        "symbol": asset + "USDT",
        "asset": asset,
        "amount": amount,
        "price": price,
        "timestamp": time.strftime("%Y-%m-%d %H:%M:%S")
    })

    with open(ORDERS_FILE, "w", encoding="utf-8") as f:
        json.dump(orders, f, indent=2)

# === –ö–æ–º–∞–Ω–¥–∏: –±–∞–ª–∞–Ω—Å —ñ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è ===
async def balance(update: Update, context: ContextTypes.DEFAULT_TYPE):
    asset = context.args[0].upper() if context.args else "USDT"
    amount = get_mock_balance(asset)
    await update.message.reply_text(f"üí∞ –ë–∞–ª–∞–Ω—Å {asset}: {amount}")

async def fund(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        asset = context.args[0].upper() if len(context.args) >= 1 else "USDT"
        amount = float(context.args[1]) if len(context.args) >= 2 else 1000
        update_mock_balance(asset, amount)
        await update.message.reply_text(f"üíß –Ü–º—ñ—Ç–æ–≤–∞–Ω–æ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: {amount} {asset}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—ñ: {e}")



# === –ö–æ–º–∞–Ω–¥–∏: —Å–∏–º—É–ª—è—Ü—ñ—è BUY/SELL ===



async def simulate_buy_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.effective_user.id)
        asset = context.args[0].upper()
        amount = float(context.args[1])
        symbol = asset + "USDT"
        price = get_price(symbol)

        track_asset(symbol)  # üõ° –ê–∫—Ç–∏–≤—É—î–º–æ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–∏–∑–∏–∫—É

        if price is None:
            await update.message.reply_text(f"‚ùå –¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {symbol}")
            return

        simulate_buy(user_id, symbol, amount)
        record_buy(symbol, price)

        await update.message.reply_text(f"üü¢ [{user_id}] –°–∏–º—É–ª—å–æ–≤–∞–Ω–æ –ø–æ–∫—É–ø–∫—É: {amount} {asset} @ {price:.4f}")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó –ø–æ–∫—É–ø–∫–∏: {e}")


async def simulate_sell_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = str(update.effective_user.id)
        asset = context.args[0].upper()
        amount = float(context.args[1])
        symbol = asset + "USDT"
        price = get_price(symbol)

        if price is None:
            await update.message.reply_text(f"‚ùå –¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è {symbol}")
            return

        # üõ° –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ä–∏–∑–∏–∫—É
        trigger, reason = evaluate_risk(symbol)
        if trigger:
            await update.message.reply_text(f"‚ö†Ô∏è –†–∏–∑–∏–∫-—Ç—Ä–∏–≥–≥–µ—Ä: {reason}\n–†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –ø—Ä–æ–¥–∞—Ç–∏ {symbol}")

        # üß† –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—Ä–∏–±—É—Ç–∫–æ–≤–æ—Å—Ç—ñ
        if not is_profitable_sell(symbol, price, min_margin=0.002):
            await update.message.reply_text(f"‚õî –ü—Ä–æ–¥–∞–∂ –Ω–µ –≤–∏–≥—ñ–¥–Ω–∏–π: {price:.4f}")
            return

        success, message = simulate_sell(user_id, symbol, amount)
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü—ñ—ó –ø—Ä–æ–¥–∞–∂—É: {e}")


# === –ö–æ–º–∞–Ω–¥–∏: –æ—Ä–¥–µ—Ä–∏ —ñ –ø–æ—Ä—Ç—Ñ–µ–ª—å ===
async def orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(ORDERS_FILE, "r", encoding="utf-8") as f:
            orders = json.load(f)
        if not orders:
            await update.message.reply_text("üì≠ –û—Ä–¥–µ—Ä—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")
            return

        last_orders = orders[-5:]
        message = "üìú –û—Å—Ç–∞–Ω–Ω—ñ –æ—Ä–¥–µ—Ä–∏:\n" + "\n".join(
            [f"{o['timestamp']}: {o['price']:.2f} {o['type']} {o['amount']} {o['asset']}" for o in last_orders]
        )
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –æ—Ä–¥–µ—Ä—ñ–≤: {e}")

async def portfolio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            balances = json.load(f)

        non_zero_assets = [
            f"{asset}: {amount}" for asset, amount in balances.items()
            if float(amount) > 0
        ]

        if not non_zero_assets:
            await update.message.reply_text("üì≠ –ü–æ—Ä—Ç—Ñ–µ–ª—å –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        else:
            message = "üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å:\n" + "\n".join(non_zero_assets)
            await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Ç—ñ –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

async def summary(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        with open(BALANCE_FILE, "r", encoding="utf-8") as f:
            balances = json.load(f)

        prices = {
            "USDT": 1.0,
            "BTC": get_price("BTCUSDT"),
            "ETH": get_price("ETHUSDT"),
            "JUP": get_price("JUPUSDT")
        }

        for asset in ["BTC", "ETH"]:
            if prices[asset] is None:
                await update.message.reply_text(f"‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —Ü—ñ–Ω—É –¥–ª—è {asset}")
                return

        total_usdt = 0.0
        lines = []

        for asset, amount in balances.items():
            price = prices.get(asset, 0)
            value = amount * price
            total_usdt += value
            lines.append(f"{asset}: {amount:.4f} √ó {price:.2f} = {value:.2f} USDT")

        message = (
            "üìä –ü–æ—Ä—Ç—Ñ–µ–ª—å:\n" +
            "\n".join(lines) +
            f"\n\nüí∞ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_usdt:.2f} USDT"
        )
        await update.message.reply_text(message)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫—É –ø–æ—Ä—Ç—Ñ–µ–ª—è: {e}")

# === –¢–æ—Ä–≥–æ–≤—ñ –∫–æ–º–∞–Ω–¥–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trader.trading_enabled = True
    await update.message.reply_text("‚úÖ –¢–æ—Ä–≥—ñ–≤–ª—è –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∞.")

async def stop(update: Update, context: ContextTypes.DEFAULT_TYPE):
    trader.trading_enabled = False
    await update.message.reply_text("‚õî –¢–æ—Ä–≥—ñ–≤–ª—è –∑—É–ø–∏–Ω–µ–Ω–∞.")

async def status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state_text = "–∞–∫—Ç–∏–≤–Ω–∞" if trader.trading_enabled else "–≤–∏–º–∫–Ω–µ–Ω–∞"
    await update.message.reply_text(f"üìä –¢–æ—Ä–≥—ñ–≤–ª—è –∑–∞—Ä–∞–∑: {state_text}")

# === –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –≥—Ä–∞—Ñ—ñ–∫ ===
async def chart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("‚ùó –í–∫–∞–∂—ñ—Ç—å —Å–∏–º–≤–æ–ª: /chart BTCUSDT")
        return

    symbol = args[0].upper()
    history = trader.price_history

    if not history or len(history) < 2:
        await update.message.reply_text(f"‚ÑπÔ∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö –¥–ª—è {symbol}")
        return

    try:
        image = generate_chart(history, symbol)
        await update.message.reply_photo(photo=image)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–±—É–¥–æ–≤—ñ –≥—Ä–∞—Ñ—ñ–∫—É: {e}")

async def analytics(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        btc = trader.get_price("BTCUSDT")
        eth = trader.get_price("ETHUSDT")
        message = (
            f"üìä ATR: {atr(trader.price_history):.2f}\n"
            f"üìà Breakout: {breakout(trader.price_history)}\n"
            f"üîó BTC/ETH Ratio: {btc_eth_ratio(btc, eth):.2f}"
        )
        await update.message.reply_text(message)
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}")

async def signal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if trader.signal_history:
        await update.message.reply_text(f"üìç –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª: {trader.signal_history[-1]}")
    else:
        await update.message.reply_text("‚ÑπÔ∏è –°–∏–≥–Ω–∞–ª—ñ–≤ –ø–æ–∫–∏ –Ω–µ–º–∞—î.")

async def log(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        entries = read_last_log_entries(10)

        if not entries:
            await update.message.reply_text("‚ÑπÔ∏è –ñ—É—Ä–Ω–∞–ª –ø–æ—Ä–æ–∂–Ω—ñ–π –∞–±–æ —â–µ –Ω–µ —Å—Ç–≤–æ—Ä–µ–Ω–æ.")
            return

        response = "üßæ –û—Å—Ç–∞–Ω–Ω—ñ –∑–∞–ø–∏—Å–∏:\n"
        for line in entries:
            timestamp, symbol, side, amount, note = line.strip().split(",")
            response += f"{timestamp}: {side} {amount} {symbol} ‚Äî {note}\n"

        await update.message.reply_text(response)

    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –∂—É—Ä–Ω–∞–ª—É: {e}")
# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
async def config(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(f"‚öôÔ∏è –ê–∫—Ç–∏–≤: {current_symbol}\n–û–±—Å—è–≥: {current_amount}")

async def set(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        key = context.args[0].upper()
        value = context.args[1]

        if key == "SYMBOL":
            update_symbol(value.upper())
            price_history.clear()
            signal_history.clear()
            await update.message.reply_text(f"‚úÖ SYMBOL –æ–Ω–æ–≤–ª–µ–Ω–æ: {value.upper()}")

        elif key == "AMOUNT":
            from trade_config import current_symbol
            amount = float(value)
            save_config(current_symbol, amount)
            await update.message.reply_text(f"‚úÖ AMOUNT –æ–Ω–æ–≤–ª–µ–Ω–æ: {amount}")

        else:
            await update.message.reply_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ SYMBOL –∞–±–æ AMOUNT.")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó: {e}")

async def reset(update: Update, context: ContextTypes.DEFAULT_TYPE):
    save_config("BTCUSDT", 0.01)
    await update.message.reply_text("üîÑ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é —Å–∫–∏–Ω—É—Ç–æ –¥–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ—ó.")

async def mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global MODE
    args = context.args
    if args:
        new_mode = args[0].lower()
        if new_mode in ["mock", "live"]:
            MODE = new_mode
            await update.message.reply_text(f"üîÑ –†–µ–∂–∏–º –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞: {MODE.upper()}")
        else:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–µ–∂–∏–º. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /mode mock –∞–±–æ /mode live")
    else:
        await update.message.reply_text(f"‚öôÔ∏è –ü–æ—Ç–æ—á–Ω–∏–π —Ä–µ–∂–∏–º: {MODE.upper()}")

# === –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è ===
async def auto_status(update: Update, context: ContextTypes.DEFAULT_TYPE):
    price = price_history[-1] if price_history else "–ù–µ–º–∞—î –¥–∞–Ω–∏—Ö"
    signal = signal_history[-1] if signal_history else "–ù–µ–º–∞—î —Å–∏–≥–Ω–∞–ª—É"
    history_len = len(price_history)

    usdt = get_mock_balance("USDT")
    eth = get_mock_balance("ETH")
    btc = get_mock_balance("BTC")

    btc_price = get_price("BTCUSDT")
    eth_price = get_price("ETHUSDT")

    usdt_value = usdt
    eth_value = eth * eth_price
    btc_value = btc * btc_price
    total_value = usdt_value + eth_value + btc_value

    text = (
        f"‚öôÔ∏è –†–µ–∂–∏–º: {state.MODE.upper()}\n"
        f"üìà –ü–æ—Ç–æ—á–Ω–∞ —Ü—ñ–Ω–∞: {price}\n"
        f"üì° –û—Å—Ç–∞–Ω–Ω—ñ–π —Å–∏–≥–Ω–∞–ª: {signal}\n"
        f"üìä –î–æ–≤–∂–∏–Ω–∞ —ñ—Å—Ç–æ—Ä—ñ—ó: {history_len}\n\n"
        f"üíº –ü–æ—Ä—Ç—Ñ–µ–ª—å:\n"
        f"USDT: {usdt:.2f} √ó 1.0 = {usdt_value:.2f} USDT\n"
        f"ETH: {eth:.4f} √ó {eth_price:.2f} = {eth_value:.2f} USDT\n"
        f"BTC: {btc:.4f} √ó {btc_price:.2f} = {btc_value:.2f} USDT\n"
        f"\nüî¢ –ó–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å: {total_value:.2f} USDT"
    )
    await update.message.reply_text(text)

async def auto_toggle(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global trading_enabled
    args = context.args
    if args:
        cmd = args[0].lower()
        if cmd == "on":
            trading_enabled = True
            await update.message.reply_text("‚úÖ –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –£–í–Ü–ú–ö–ù–ï–ù–ê")
        elif cmd == "off":
            trading_enabled = False
            await update.message.reply_text("‚õî –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –í–ò–ú–ö–ù–ï–ù–ê")
        else:
            await update.message.reply_text("‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ /auto_toggle on –∞–±–æ /auto_toggle off")
    else:
        status = "–£–í–Ü–ú–ö–ù–ï–ù–ê" if trading_enabled else "–í–ò–ú–ö–ù–ï–ù–ê"
        await update.message.reply_text(f"‚öôÔ∏è –ê–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—è –∑–∞—Ä–∞–∑: {status}")
# === PnL —Ç–∞ –ø–æ–∑–∏—Ü—ñ—ó ===
async def pnl(update: Update, context: ContextTypes.DEFAULT_TYPE):
    btc_price = get_price("BTCUSDT")
    eth_price = get_price("ETHUSDT")

    btc_pnl = (btc_price - avg_entry_price["BTC"]) * position_size["BTC"]
    eth_pnl = (eth_price - avg_entry_price["ETH"]) * position_size["ETH"]

    text = (
        f"üìä –ù–µ—Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π PnL:\n"
        f"BTC: {position_size['BTC']:.4f} @ {avg_entry_price['BTC']:.2f} ‚Üí {btc_price:.2f}\n"
        f"‚û°Ô∏è PnL: {btc_pnl:.2f} USDT\n\n"
        f"ETH: {position_size['ETH']:.4f} @ {avg_entry_price['ETH']:.2f} ‚Üí {eth_price:.2f}\n"
        f"‚û°Ô∏è PnL: {eth_pnl:.2f} USDT"
    )
    await update.message.reply_text(text)

async def entry_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    entries = get_all_entries()
    if not entries:
        await update.message.reply_text("‚ÑπÔ∏è –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –ø–æ–∑–∏—Ü—ñ–π.")
        return

    lines = ["üìä –ê–∫—Ç–∏–≤–Ω—ñ –ø–æ–∑–∏—Ü—ñ—ó:"]
    for asset, data in entries.items():
        lines.append(f"{asset}: {data['position_size']:.4f} @ {data['entry_price']:.2f}")
    await update.message.reply_text("\n".join(lines))

async def pnl_history_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not pnl_history:
        await update.message.reply_text("‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è PnL –ø–æ—Ä–æ–∂–Ω—è.")
        return

    lines = ["üìà –Ü—Å—Ç–æ—Ä—ñ—è —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PnL:"]
    for i, record in enumerate(pnl_history[-10:], 1):
        lines.append(f"{i}. {record['asset']} {record['amount']} @ {record['entry']:.2f} ‚Üí {record['exit']:.2f} = {record['pnl']:.2f} USDT")
    await update.message.reply_text("\n".join(lines))

async def pnl_chart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chart = generate_pnl_chart(pnl_history)
    if chart is None:
        await update.message.reply_text("‚ÑπÔ∏è –Ü—Å—Ç–æ—Ä—ñ—è PnL –ø–æ—Ä–æ–∂–Ω—è.")
        return

    await update.message.reply_photo(photo=InputFile(chart), caption="üìä –ì—Ä–∞—Ñ—ñ–∫ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PnL")

# === Help ===
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üìò –î–æ—Å—Ç—É–ø–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:\n"
        "/start ‚Äî –∞–∫—Ç–∏–≤—É–≤–∞—Ç–∏ —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/stop ‚Äî –ø—Ä–∏–∑—É–ø–∏–Ω–∏—Ç–∏ —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/status ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å—Ç–∞–Ω\n"
        "/chart ‚Äî –æ—Ç—Ä–∏–º–∞—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫ –º–æ–Ω–µ—Ç–∏ –ø—Ä–∏–∫ JUPUSDT\n"
        "/analytics ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∞–Ω–∞–ª—ñ—Ç–∏–∫—É\n"
        "/signal ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–æ—Ä–≥–æ–≤–∏–π —Å–∏–≥–Ω–∞–ª\n"
        "/log ‚Äî –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤ –∑ –∂—É—Ä–Ω–∞–ª—É\n"
        "/config ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é\n"
        "/set SYMBOL BTCUSDT ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –∞–∫—Ç–∏–≤\n"
        "/set AMOUNT 0.01 ‚Äî –∑–º—ñ–Ω–∏—Ç–∏ –æ–±—Å—è–≥\n"
        "/reset ‚Äî —Å–∫–∏–Ω—É—Ç–∏ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é\n"
        "/balance USDT ‚Äî –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –±–∞–ª–∞–Ω—Å\n"
        "/fund USDT 1000 ‚Äî –∑–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤—ñ –∫–æ—à—Ç–∏\n"
        "/portfolio ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–∏\n"
        "/summary ‚Äî –∑–∞–≥–∞–ª—å–Ω–∞ –≤–∞—Ä—Ç—ñ—Å—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—è\n"
        "/simulate_buy BTCUSDT 0.01 ‚Äî —Å–∏–º—É–ª—é–≤–∞—Ç–∏ –ø–æ–∫—É–ø–∫—É\n"
        "/simulate_sell BTCUSDT 0.01 ‚Äî —Å–∏–º—É–ª—é–≤–∞—Ç–∏ –ø—Ä–æ–¥–∞–∂\n"
        "/orders ‚Äî –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –æ—Ä–¥–µ—Ä–∏\n"
        "/mode mock ‚Üí –ø–æ–≤–µ—Ä—Ç–∞—î –≤ —Å–∏–º—É–ª—è—Ü—ñ—é\n"
        "/mode live ‚Üí –ø–µ—Ä–µ–º–∏–∫–∞—î –Ω–∞ —Ä–µ–∞–ª—å–Ω—É —Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/auto_status ‚Äî —Å—Ç–∞–Ω –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—ñ\n"
        "/auto_toggle ‚Äî –ø–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç—É—Å\n"
        "/auto_toggle on ‚Äî –≤–º–∏–∫–∞—î –∞–≤—Ç–æ—Ç–æ—Ä–≥—ñ–≤–ª—é\n"
        "/auto_toggle off ‚Äî –≤–∏–º–∏–∫–∞—î\n"
        "/pnl ‚Äî –ø–æ–∫–∞–∂–µ –Ω–∞—Å–∫—ñ–ª—å–∫–∏ –±–æ—Ç –≤ –ø–ª—é—Å–∞—Ö\n"
        "/entry_status ‚Äî –ø–æ–∫–∞–∑—É—î –≤—Å—ñ –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ–∑–∏—Ü—ñ—ó\n"
        "/pnl_history ‚Äî —ñ—Å—Ç–æ—Ä—ñ—è —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ–≥–æ PnL\n"
        "/pnl_chart ‚Äî –≥—Ä–∞—Ñ—ñ–∫\n"
        "/help ‚Äî —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"
    )

# === –ü–æ–±—É–¥–æ–≤–∞ Telegram-–±–æ—Ç–∞ ===
def build_bot():
    app = ApplicationBuilder().token(CONFIG.get("BOT_TOKEN", "")).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stop", stop))
    app.add_handler(CommandHandler("status", status))
    app.add_handler(CommandHandler("chart", chart))
    app.add_handler(CommandHandler("analytics", analytics))
    app.add_handler(CommandHandler("signal", signal))
    app.add_handler(CommandHandler("log", log))
    app.add_handler(CommandHandler("config", config))
    app.add_handler(CommandHandler("set", set))
    app.add_handler(CommandHandler("reset", reset))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("balance", balance))
    app.add_handler(CommandHandler("fund", fund))
    app.add_handler(CommandHandler("portfolio", portfolio))
    app.add_handler(CommandHandler("summary", summary))
    app.add_handler(CommandHandler("simulate_buy", simulate_buy_command))
    app.add_handler(CommandHandler("simulate_sell", simulate_sell_command))
    app.add_handler(CommandHandler("orders", orders))
    app.add_handler(CommandHandler("mode", mode))
    app.add_handler(CommandHandler("auto_status", auto_status))
    app.add_handler(CommandHandler("auto_toggle", auto_toggle))
    app.add_handler(CommandHandler("pnl", pnl))
    app.add_handler(CommandHandler("entry_status", entry_status_command))
    app.add_handler(CommandHandler("pnl_history", pnl_history_command))
    app.add_handler(CommandHandler("pnl_chart", pnl_chart_command))

    return app
