# binance_api.py
from binance.client import Client
from telegram_notifier import send_telegram_message
from logger import log_info, log_error
from config.config_loader import CONFIG
from core.price_feed import get_price  # ‚Üê –Ω–æ–≤–∏–π —ñ–º–ø–æ—Ä—Ç

# === –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è ===
API_KEY = CONFIG.get("API_KEY", "")
API_SECRET = CONFIG.get("API_SECRET", "")
MODE = CONFIG.get("MODE", "test")  # "live" –∞–±–æ "test"

# === –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á—ñ–≤ ===
if MODE == "live" and (not API_KEY or not API_SECRET):
    log_error("‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ API-–∫–ª—é—á—ñ –¥–ª—è live-—Ä–µ–∂–∏–º—É")
    send_telegram_message("‚ùå Binance API: –∫–ª—é—á—ñ –Ω–µ –∑–∞–¥–∞–Ω—ñ")
    raise ValueError("API credentials missing")

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∫–ª—ñ—î–Ω—Ç–∞ Binance ===
client = Client(API_KEY, API_SECRET) if MODE == "live" else None

# === –û—Ç—Ä–∏–º–∞—Ç–∏ –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤—É ===
def get_balance(asset):
    """
    –ü–æ–≤–µ—Ä—Ç–∞—î –±–∞–ª–∞–Ω—Å –∞–∫—Ç–∏–≤—É.
    """
    try:
        if MODE == "live":
            info = client.get_asset_balance(asset=asset)
            balance = float(info["free"])
            log_info(f"üí∞ –ë–∞–ª–∞–Ω—Å {asset}: {balance}")
            return balance
        else:
            log_error("‚ùå get_balance –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ mock-—Ä–µ–∂–∏–º—ñ —á–µ—Ä–µ–∑ —Ü–∏–∫–ª—ñ—á–Ω–∏–π —ñ–º–ø–æ—Ä—Ç")
            return 0.0
    except Exception as e:
        log_error(f"‚ùå Binance get_balance –ø–æ–º–∏–ª–∫–∞: {e}")
        send_telegram_message(f"‚ùå Binance API get_balance –ø–æ–º–∏–ª–∫–∞: {e}")
        return 0.0

# === –í–∏–∫–æ–Ω–∞—Ç–∏ –æ—Ä–¥–µ—Ä ===
def place_order(symbol, side, quantity):
    """
    –í–∏–∫–æ–Ω—É—î –æ—Ä–¥–µ—Ä BUY –∞–±–æ SELL —á–µ—Ä–µ–∑ Binance API.
    """
    price = get_price(symbol)

    if price is None:
        return {"id": "ERROR", "price": "N/A", "status": "FAILED", "message": "–¶—ñ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"}

    try:
        if MODE == "live":
            order = client.create_order(
                symbol=symbol,
                side=side,
                type="MARKET",
                quantity=quantity
            )
            fills = order.get("fills", [])
            fill_price = fills[0]["price"] if fills else "N/A"

            log_info(f"‚úÖ LIVE –æ—Ä–¥–µ—Ä {side} {symbol} @ {fill_price}")
            return {
                "id": order.get("orderId", "N/A"),
                "price": fill_price,
                "status": order.get("status", "UNKNOWN")
            }

        else:
            log_error("‚ùå place_order –Ω–µ –ø—ñ–¥—Ç—Ä–∏–º—É—î—Ç—å—Å—è –≤ mock-—Ä–µ–∂–∏–º—ñ ‚Äî –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ simulate_buy/sell —É bot_control.py")
            return {"id": "SIM_DISABLED", "price": price, "status": "SKIPPED", "message": "Mock mode: use simulate_buy/sell"}

    except Exception as e:
        log_error(f"‚ùå Binance place_order –ø–æ–º–∏–ª–∫–∞: {e}")
        send_telegram_message(f"‚ùå Binance API place_order –ø–æ–º–∏–ª–∫–∞: {e}")
        return {"id": "ERROR", "price": "N/A", "status": "FAILED", "message": str(e)}
